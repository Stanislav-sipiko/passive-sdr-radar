"""
kraken_reader.py ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–∏—ë–º–∞ IQ –¥–∞–Ω–Ω—ã—Ö –æ—Ç KrakenSDR.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
  ‚Ä¢ file ‚Äî —á—Ç–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ IQ
  ‚Ä¢ udp  ‚Äî –ø—Ä–∏—ë–º –ø–æ—Ç–æ–∫–∞ IQ-–¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ UDP

–ö–∞–∂–¥—ã–π IQ —Å—ç–º–ø–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–∞—Ä–∞ float32 (I, Q).

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
üìò 1. –ß—Ç–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
from passive_radar.capture.kraken_reader import get_iq_source

for block in get_iq_source(mode="file", file_path="data/test_iq.bin"):
    print(block[:5])

üåê 2. –ß—Ç–µ–Ω–∏–µ UDP –ø–æ—Ç–æ–∫–∞:
from passive_radar.capture.kraken_reader import get_iq_source

for block in get_iq_source(mode="udp", host="0.0.0.0", port=5000):
    print(f"–ü–æ–ª—É—á–µ–Ω –±–ª–æ–∫: {len(block)}")
"""
import socket
import struct
import numpy as np
import time
from pathlib import Path
from typing import Optional, Callable

class KrakenReader:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ IQ-–¥–∞–Ω–Ω—ã—Ö:
      - file: —á–∏—Ç–∞–µ—Ç –∏–∑ .bin —Ñ–∞–π–ª–∞ (–∑–∞–ø–∏—Å—å —Å KrakenSDR)
      - udp: —á–∏—Ç–∞–µ—Ç –ø–æ—Ç–æ–∫ IQ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ UDP
    –ú–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CAF (Correlation and Ambiguity Function).
    """

    def __init__(
        self,
        mode: str = "file",
        source: str = "capture.bin",
        sample_rate: float = 2.4e6,
        num_channels: int = 5,
        block_size: int = 262144,
        caf_callback: Optional[Callable[[np.ndarray], None]] = None,
        udp_ip: str = "0.0.0.0",
        udp_port: int = 5000,
        dtype=np.complex64,
    ):
        assert mode in ("file", "udp"), "mode must be 'file' or 'udp'"
        self.mode = mode
        self.source = source
        self.sample_rate = sample_rate
        self.num_channels = num_channels
        self.block_size = block_size
        self.caf_callback = caf_callback
        self.udp_ip = udp_ip
        self.udp_port = udp_port
        self.dtype = dtype
        self.sock = None
        self.running = False

    def _read_block_file(self, f):
        """–°—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞."""
        bytes_per_sample = np.dtype(self.dtype).itemsize
        total_samples = self.block_size * self.num_channels
        data = f.read(total_samples * bytes_per_sample)
        if not data or len(data) < total_samples * bytes_per_sample:
            return None
        iq = np.frombuffer(data, dtype=self.dtype)
        iq = iq.reshape((self.num_channels, -1))
        return iq

    def _read_block_udp(self):
        """–ü—Ä–∏—ë–º IQ-–¥–∞–Ω–Ω—ã—Ö –ø–æ UDP."""
        packet_size = self.block_size * self.num_channels * np.dtype(self.dtype).itemsize
        data, _ = self.sock.recvfrom(packet_size)
        if not data:
            return None
        iq = np.frombuffer(data, dtype=self.dtype)
        iq = iq.reshape((self.num_channels, -1))
        return iq

    def start(self):
        """–ó–∞–ø—É—Å–∫ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –≤ CAF."""
        self.running = True
        print(f"[KrakenReader] Starting in '{self.mode}' mode...")

        if self.mode == "file":
            file_path = Path(self.source)
            assert file_path.exists(), f"File not found: {file_path}"
            with open(file_path, "rb") as f:
                while self.running:
                    block = self._read_block_file(f)
                    if block is None:
                        print("[KrakenReader] EOF reached.")
                        break
                    if self.caf_callback:
                        self.caf_callback(block)
        else:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sock.bind((self.udp_ip, self.udp_port))
            print(f"[KrakenReader] Listening UDP on {self.udp_ip}:{self.udp_port}")
            while self.running:
                try:
                    block = self._read_block_udp()
                    if block is None:
                        continue
                    if self.caf_callback:
                        self.caf_callback(block)
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    print(f"[KrakenReader] Error: {e}")
                    time.sleep(0.5)

        print("[KrakenReader] Stopped.")

    def stop(self):
        self.running = False
        if self.sock:
            self.sock.close()
        print("[KrakenReader] Stop signal received.")


# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
if __name__ == "__main__":
    from passive_radar.caf import caf_process_block  # –ø—Ä–∏–º–µ—Ä: –ø–æ–¥–∫–ª—é—á–∞–µ–º –≤–∞—à –º–æ–¥—É–ª—å CAF

    def process_block(block):
        print(f"[Reader] Got block shape={block.shape}")
        caf_process_block(block)  # –ø–µ—Ä–µ–¥–∞—ë–º –Ω–∞–ø—Ä—è–º—É—é –≤ CAF

    reader = KrakenReader(
        mode="udp",          # –∏–ª–∏ "file"
        udp_ip="0.0.0.0",
        udp_port=5000,
        block_size=65536,
        num_channels=5,
        caf_callback=process_block,
    )

    reader.start()
